package com.fh.taolijie.dao.mapper;

import com.fh.taolijie.domain.NotificationModel;
import org.apache.ibatis.annotations.Param;
import org.springframework.stereotype.Repository;

import java.util.Date;
import java.util.List;

@Repository
public interface NotificationModelMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table notification
     *
     * @mbggenerated
     */
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table notification
     *
     * @mbggenerated
     */
    int insert(NotificationModel record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table notification
     *
     * @mbggenerated
     */
    int insertSelective(NotificationModel record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table notification
     *
     * @mbggenerated
     */
    NotificationModel selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table notification
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(NotificationModel record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table notification
     *
     * @mbggenerated
     */
    int updateByPrimaryKeyWithBLOBs(NotificationModel record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table notification
     *
     * @mbggenerated
     */
    int updateByPrimaryKey(NotificationModel record);

    List<NotificationModel> findBy(NotificationModel model);

    List<NotificationModel> findByTimeRange(@Param("memberId")Integer memberId, @Param("roleName") String roleName, @Param("startTime") Date startTime, @Param("endTime") Date endTime, @Param("pageNumber") int pageNumber, @Param("pageSize") int pageSize);

    Long getNotificationAmount(@Param("memberId") Integer memberId, @Param("isRead") boolean isRead)
            ;
}