<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fh.taolijie.dao.mapper.MemberMapper">

    <resultMap type="MemberModel" id="memberRS">
        <id property="id" column="id"/>
        <result property="username" column="username"/>
        <result property="password" column="password"/>
        <result property="email" column="email"/>

        <result property="name" column="name"/>
        <result property="studentId" column="student_id"/>
        <result property="gender" column="gender"/>
        <result property="age" column="age"/>

        <result property="verified" column="verified"/>
        <result property="valid" column="valid"/>
        <result property="profilePhotoPath" column="profile_photo_path"/>

        <result property="phone" column="phone"/>
        <result property="qq" column="qq"/>

        <result property="companyName" column="company_name"/>
        <result property="blockList" column="block_list"/>

        <result property="createdTime" column="created_time"/>
        <result property="appliedJobIds" column="applied_job_ids"/>

        <result property="complaint" column="complaint"/>
        <result property="likedJobIds" column="liked_job_ids"/>
        <result property="likedShIds" column="liked_sh_ids"/>
        <result property="favoriteJobIds" column="favorite_job_ids"/>
        <result property="favoriteShIds" column="favorite_sh_ids"/>
        <result property="favoriteResumeIds" column="favorite_resume_ids"/>

        <result property="autoLoginIdentifier" column="auto_login_identifier"/>

        <result property="lastPostTime" column="last_post_time"/>
        <result property="profilePhotoId" column="profile_photo_id"/>
        <result property="resetPasswordToken" column="reset_password_token"/>
        <result property="lastTokenDate" column="last_token_date"/>
    </resultMap>

    <select id="getMemberById" resultMap="memberRS" parameterType="Integer">
        SELECT * FROM member mem
        LEFT JOIN role r ON
        r.id IN (
        SELECT rel.role_id FROM member_role_rel rel WHERE rel.member_id = #{id}
        )
        WHERE
        mem.id = #{id}
    </select>

    <select id="getMemberByName" resultMap="memberRS" parameterType="String">
        SELECT mem.*, r.*
        from (
        SELECT id FROM member WHERE username = #{username}
        ) info, member mem
        LEFT JOIN role r
        ON r.id in
        (SELECT role_id FROM member_role_rel WHERE member_id = info.id)
        where mem.id = info.id
    </select>

    <select id="getMemberList" resultMap="memberRS" resultType="ArrayList">
        SELECT * FROM member
        LIMIT #{param1}, #{param2}
    </select>

    <select id="getMemberAmount" resultType="Long">
        SELECT COUNT(*) FROM member
    </select>

    <select id="isUsernameExists" resultType="boolean">
        SELECT EXISTS(SELECT * FROM member WHERE username = #{username})
    </select>


    <insert id="saveMember">
        INSERT INTO member (username, password, email, name, student_id, gender, age, verified, valid, profile_photo_path,
        phone, qq, company_name, block_list, created_time, applied_job_ids, complaint, liked_job_ids, liked_sh_ids,favorite_job_ids, favorite_sh_ids,
        favorite_resume_ids, auto_login_identifier, last_post_time, profile_photo_id, reset_password_token, last_token_date)
        VALUES (#{uername}, #{password}, #{email}, #{name}, #{studentId}, #{gender}, #{age}, #{verified}, #{valid}, #{profilePhotoPath},
        #{phone}, #{qq}, #{companyName}, #{blockList}, #{createdTime}, #{appliedJobIds}, #{complaint}, #{likedJobIds}, #{likedShIds}, #{favoriteJobIds}, #{favoriteShIds},
        #{favoriteResumeIds}, #{autoLoginIdentifer}, #{lastPostTime}, #{profilePhotoId}, #{resetPasswordToken}, #{lastTokenDate})
    </insert>

    <insert id="assignRole">
        INSERT INTO member_role_rel (member_id, role_id)
        VALUES (#{param1}, #{param2})
    </insert>

    <update id="updateSelectiveById">
        UPDATE member
        <set>
            <if test="password != null">password = #{password},</if>
            <if test="email != null">AND email = #{email},</if>
            <if test="name != null">AND name = #{name},</if>
            <if test="studentId != null">AND student_id = #{student_id},</if>
            <if test="gender != null">AND gender = #{gender},</if>
            <if test="age != null">AND age = #{age},</if>
            <if test="verified != null">AND verified = #{verified},</if>
            <if test="valid != null">AND valid = #{valid},</if>
            <if test="profilePhotoPath != null">AND profile_photo_path = #{profilePhotoPath},</if>
            <if test="phone != null">AND phone = #{phone},</if>
            <if test="qq != null">AND qq = #{qq},</if>
            <if test="companyName != null">AND company_name = #{companyName},</if>
            <if test="blockList != null">AND block_list = #{blockList},</if>
            <if test="createdTime != null">AND created_time = #{createdTime},</if>
            <if test="appliedJobIds != null">AND applied_job_ids = #{appliedJobIds},</if>
            <if test="complaint != null">AND complaint = #{complaint},</if>
            <if test="likedJobIds != null">AND liked_job_ids = #{likedJobIds},</if>
            <if test="likedShIds != null">AND liked_sh_ids = #{likedShIds},</if>
            <if test="favoriteJobIds != null">AND favorite_job_ids = #{favoriteJobIds},</if>
            <if test="favoriteShIds != null">AND favorite_sh_ids = #{favoriteShIds},</if>
            <if test="favoriteResumeIds != null">AND favorite_resume_ids = #{favoriteResumeIds},</if>
            <if test="autoLoginIdentifier != null">AND auto_login_identifier = #{autoLoginIdentifier},</if>
            <if test="lastPostTime != null">AND last_post_time = #{lastPostTime},</if>
            <if test="profilePhotoId != null">AND profile_photo_id = #{profilePhotoId},</if>
            <if test="resetPasswordToken != null">AND reset_password_token = #{resetPasswordToken},</if>
            <if test="lastTokenDate != null">AND last_token_date = #{lastTokenDate},</if>
        </set>
        WHERE id = #{id}
    </update>


    <delete id="removeRole">
        DELETE FROM member_role_rel
        WHERE
        member_id = #{memberId} AND role_id = #{role_id}
    </delete>

<!--    <update id="updateBySelective">
        UPDATE member
        <set>
        </set>
        WHERE id = #{id}
    </update>-->

</mapper>